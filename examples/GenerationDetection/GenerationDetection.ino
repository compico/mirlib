/*
 * GenerationDetection.ino
 * 
 * –ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 * —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * 
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CC1101:
 * VCC -> 3.3V
 * GND -> GND
 * MOSI -> GPIO 23 (ESP32) / D7 (ESP8266)
 * MISO -> GPIO 19 (ESP32) / D6 (ESP8266)
 * SCK -> GPIO 18 (ESP32) / D5 (ESP8266)
 * CS -> GPIO 5 (ESP32/ESP8266)
 * GDO0 -> GPIO 2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * GDO2 -> GPIO 4 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */

#include <MirlibClient.h>

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const int CS_PIN = 5;
const int GDO0_PIN = 2;
const int GDO2_PIN = 4;

// –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const uint16_t SCAN_ADDRESSES[] = {
    0x1234, 0x5678, 0x9ABC, 0xDEF0, 0x1111, 0x2222, 0x3333, 0x4444,
    0x5555, 0x6666, 0x7777, 0x8888, 0x9999, 0xAAAA, 0xBBBB, 0xCCCC
};
const int SCAN_COUNT = sizeof(SCAN_ADDRESSES) / sizeof(SCAN_ADDRESSES[0]);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
MirlibClient protocol(0xFFFF);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
struct DeviceInfo {
    uint16_t address;
    bool isOnline;
    uint8_t boardId;
    uint16_t firmwareVersion;
    MirlibClient::Generation generation;
    String generationName;
    bool supports100A;
    bool hasStreetLighting;
    bool supportsPing;
    bool supportsGetInfo;
    bool supportsReadDateTime;
    bool supportsReadStatus;
    bool supportsReadInstantValue;
};

std::vector<DeviceInfo> discoveredDevices;

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("=== Mirlib Generation Detection Example ===");
    Serial.println("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CC1101
    if (!protocol.begin(CS_PIN, GDO0_PIN, GDO2_PIN)) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CC1101!");
        while (1) delay(1000);
    }
    Serial.println("‚úÖ CC1101 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    protocol.setTimeout(2000); // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    Serial.println("\nüîé –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏–π...");
    Serial.println("–ê–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: " + String(SCAN_COUNT));
    Serial.println("=========================================");

    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    scanDevices();

    // –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    analyzeDevices();

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥
    testCommandCompatibility();

    Serial.println("\nüèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
}

void loop() {
    handleSerialCommands();
    delay(100);
}

void scanDevices() {
    Serial.println("üì° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");

    int foundCount = 0;

    for (int i = 0; i < SCAN_COUNT; i++) {
        uint16_t address = SCAN_ADDRESSES[i];

        Serial.print("   –ü—Ä–æ–≤–µ—Ä–∫–∞ 0x" + String(address, HEX) + "... ");

        DeviceInfo device;
        device.address = address;
        device.isOnline = false;
        device.boardId = 0;
        device.firmwareVersion = 0;
        device.generation = MirlibClient::UNKNOWN;
        device.generationName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        device.supports100A = false;
        device.hasStreetLighting = false;

        // –ü–æ–ø—ã—Ç–∫–∞ Ping
        PingCommand pingCmd;
        if (protocol.sendCommand(&pingCmd, address)) {
            device.isOnline = true;
            device.firmwareVersion = pingCmd.getFirmwareVersion();
            device.supportsPing = true;
            foundCount++;

            Serial.print("‚úÖ –û–Ω–ª–∞–π–Ω ");

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GetInfo
            if (determineGeneration(device)) {
                Serial.println("(" + device.generationName + ")");
            } else {
                Serial.println("(–ø–æ–∫–æ–ª–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)");
            }

            discoveredDevices.push_back(device);
        } else {
            Serial.println("‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }

        delay(200); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    }

    Serial.println("\nüìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    Serial.println("   –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: " + String(foundCount) + " –∏–∑ " + String(SCAN_COUNT));
}

bool determineGeneration(DeviceInfo &device) {
    GetInfoCommand infoCmd;

    if (protocol.sendCommand(&infoCmd, device.address)) {
        device.supportsGetInfo = true;
        device.boardId = infoCmd.getBoardId();
        device.supports100A = infoCmd.supports100A();

        if (infoCmd.isNewGeneration()) {
            device.hasStreetLighting = infoCmd.hasStreetLightingControl();
        }

        GenerationInfo genInfo = infoCmd.getGenerationInfo();

        if (genInfo.isOldGeneration) {
            device.generation = MirlibClient::OLD_GENERATION;
            device.generationName = "–°—Ç–∞—Ä–æ–µ";
        } else if (genInfo.isTransitionGeneration) {
            device.generation = MirlibClient::TRANSITION_GENERATION;
            device.generationName = "–ü–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ";
        } else if (genInfo.isNewGeneration) {
            device.generation = MirlibClient::NEW_GENERATION;
            device.generationName = "–ù–æ–≤–æ–µ";
        } else {
            device.generation = MirlibClient::UNKNOWN;
            device.generationName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            return false;
        }

        return true;
    } else {
        device.supportsGetInfo = false;
        return false;
    }
}

void analyzeDevices() {
    if (discoveredDevices.empty()) {
        Serial.println("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
    }

    Serial.println("\nüìä –ê–ù–ê–õ–ò–ó –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–• –£–°–¢–†–û–ô–°–¢–í");
    Serial.println("==================================");

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    int oldCount = 0, transitionCount = 0, newCount = 0, unknownCount = 0;
    int support100A = 0, supportStreetLighting = 0;

    for (const auto &device: discoveredDevices) {
        switch (device.generation) {
            case MirlibClient::OLD_GENERATION: oldCount++;
                break;
            case MirlibClient::TRANSITION_GENERATION: transitionCount++;
                break;
            case MirlibClient::NEW_GENERATION: newCount++;
                break;
            default: unknownCount++;
                break;
        }

        if (device.supports100A) support100A++;
        if (device.hasStreetLighting) supportStreetLighting++;
    }

    Serial.println("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º:");
    Serial.println("   –°—Ç–∞—Ä–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ: " + String(oldCount));
    Serial.println("   –ü–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ: " + String(transitionCount));
    Serial.println("   –ù–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ: " + String(newCount));
    Serial.println("   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ: " + String(unknownCount));
    Serial.println("   –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 100–ê: " + String(support100A) + " –∏–∑ " + String(discoveredDevices.size()));
    Serial.println(
        "   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º: " + String(supportStreetLighting) + " –∏–∑ " + String(discoveredDevices.size()));

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    Serial.println("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
    Serial.println("–ê–¥—Ä–µ—Å  | –ü–æ–∫–æ–ª–µ–Ω–∏–µ   | ID   | –ü—Ä–æ—à–∏–≤–∫–∞ | 100–ê | –û—Å–≤–µ—â–µ–Ω–∏–µ | –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏");
    Serial.println("-------|-------------|------|----------|------|-----------|------------");

    for (const auto &device: discoveredDevices) {
        String addr = "0x" + String(device.address, HEX);
        while (addr.length() < 6) addr += " ";

        String gen = device.generationName;
        while (gen.length() < 11) gen += " ";

        String boardId = "0x" + String(device.boardId, HEX);
        while (boardId.length() < 4) boardId += " ";

        String firmware = "0x" + String(device.firmwareVersion, HEX);
        while (firmware.length() < 8) firmware += " ";

        String support100A = device.supports100A ? "–î–∞  " : "–ù–µ—Ç ";
        String lighting = device.hasStreetLighting ? "–î–∞       " : "–ù–µ—Ç      ";

        String features = "";
        if (device.generation == MirlibClient::OLD_GENERATION) {
            features = "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å";
        } else if (device.generation == MirlibClient::TRANSITION_GENERATION) {
            features = "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è";
        } else if (device.generation == MirlibClient::NEW_GENERATION) {
            features = "–ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã";
        }

        Serial.println(addr + " | " + gen + " | " + boardId + " | " + firmware + " | " +
                       support100A + " | " + lighting + " | " + features);
    }

    // –ê–Ω–∞–ª–∏–∑ ID –ø–ª–∞—Ç
    Serial.println("\nüîß –ê–Ω–∞–ª–∏–∑ ID –ø–ª–∞—Ç:");
    printBoardIdAnalysis();
}

void printBoardIdAnalysis() {
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ ID –ø–ª–∞—Ç
    std::map<uint8_t, int> boardCounts;
    for (const auto &device: discoveredDevices) {
        boardCounts[device.boardId]++;
    }

    Serial.println("ID –ø–ª–∞—Ç—ã | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –ü–æ–∫–æ–ª–µ–Ω–∏–µ   | –û–ø–∏—Å–∞–Ω–∏–µ");
    Serial.println("---------|------------|-------------|----------");

    for (const auto &pair: boardCounts) {
        uint8_t boardId = pair.first;
        int count = pair.second;

        String id = "0x" + String(boardId, HEX);
        while (id.length() < 8) id += " ";

        String countStr = String(count);
        while (countStr.length() < 10) countStr += " ";

        String generation = "";
        String description = "";

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ ID –ø–ª–∞—Ç—ã
        switch (boardId) {
            case 0x01:
            case 0x02:
            case 0x03:
            case 0x04:
            case 0x0C:
            case 0x0D:
            case 0x11:
            case 0x12:
                generation = "–°—Ç–∞—Ä–æ–µ     ";
                description = "–ë–∞–∑–æ–≤—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏";
                break;
            case 0x07:
            case 0x08:
            case 0x0A:
            case 0x0B:
                generation = "–ü–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ ";
                description = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è";
                break;
            case 0x09:
            case 0x0E:
            case 0x0F:
            case 0x10:
            case 0x20:
            case 0x21:
            case 0x22:
                generation = "–ù–æ–≤–æ–µ      ";
                description = "–ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å";
                break;
            default:
                generation = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ";
                description = "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–ª–∞—Ç–∞";
                break;
        }

        Serial.println(id + " | " + countStr + " | " + generation + " | " + description);
    }
}

void testCommandCompatibility() {
    if (discoveredDevices.empty()) {
        return;
    }

    Serial.println("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ö–û–ú–ê–ù–î");
    Serial.println("=====================================");

    for (auto &device: discoveredDevices) {
        Serial.println("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 0x" + String(device.address, HEX) +
                       " (" + device.generationName + " –ø–æ–∫–æ–ª–µ–Ω–∏–µ)");

        testDeviceCommands(device);
    }

    // –°–≤–æ–¥–∫–∞ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    printCompatibilitySummary();
}

void testDeviceCommands(DeviceInfo &device) {
    Serial.println("   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:");

    // 1. Ping (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏)
    PingCommand pingCmd;
    device.supportsPing = protocol.sendCommand(&pingCmd, device.address);
    Serial.println("      Ping: " + String(device.supportsPing ? "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"));

    // 2. GetInfo (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏)
    GetInfoCommand infoCmd;
    device.supportsGetInfo = protocol.sendCommand(&infoCmd, device.address);
    Serial.println("      GetInfo: " + String(device.supportsGetInfo ? "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"));

    // 3. ReadDateTime (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏)
    ReadDateTimeCommand dateTimeCmd;
    device.supportsReadDateTime = protocol.sendCommand(&dateTimeCmd, device.address);
    Serial.println(
        "      ReadDateTime: " + String(device.supportsReadDateTime ? "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"));

    // 4. ReadStatus (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏, –Ω–æ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–Ω—ã–π)
    ReadStatusCommand statusCmd;
    statusCmd.setGeneration(device.boardId, 0x32);
    if (device.generation != MirlibClient::OLD_GENERATION) {
        statusCmd.setRequest(ACTIVE_FORWARD);
    }
    device.supportsReadStatus = protocol.sendCommand(&statusCmd, device.address);
    Serial.println(
        "      ReadStatus: " + String(device.supportsReadStatus ? "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"));

    // 5. ReadInstantValue (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ –∏ –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è)
    if (device.generation != MirlibClient::OLD_GENERATION) {
        ReadInstantValueCommand instantCmd;
        instantCmd.setGeneration(device.boardId, 0x32);
        instantCmd.setRequest(GROUP_BASIC);
        device.supportsReadInstantValue = protocol.sendCommand(&instantCmd, device.address);
        Serial.println(
            "      ReadInstantValue: " + String(device.supportsReadInstantValue
                                                    ? "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                                                    : "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"));
    } else {
        device.supportsReadInstantValue = false;
        Serial.println("      ReadInstantValue: ‚ö†Ô∏è –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ–º");
    }

    delay(1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
}

void printCompatibilitySummary() {
    Serial.println("\nüìä –°–í–û–î–ö–ê –ü–û –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ö–û–ú–ê–ù–î");
    Serial.println("==================================");

    Serial.println("–ö–æ–º–∞–Ω–¥–∞         | –°—Ç–∞—Ä–æ–µ | –ü–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ | –ù–æ–≤–æ–µ | –û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å");
    Serial.println("----------------|--------|------------|-------|-------------------");

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º
    struct CommandSupport {
        int oldTotal = 0, oldSupported = 0;
        int transitionTotal = 0, transitionSupported = 0;
        int newTotal = 0, newSupported = 0;
    };

    CommandSupport ping, getInfo, dateTime, readStatus, instantValue;

    for (const auto &device: discoveredDevices) {
        switch (device.generation) {
            case MirlibClient::OLD_GENERATION:
                ping.oldTotal++;
                getInfo.oldTotal++;
                dateTime.oldTotal++;
                readStatus.oldTotal++;
                instantValue.oldTotal++;
                if (device.supportsPing) ping.oldSupported++;
                if (device.supportsGetInfo) getInfo.oldSupported++;
                if (device.supportsReadDateTime) dateTime.oldSupported++;
                if (device.supportsReadStatus) readStatus.oldSupported++;
                if (device.supportsReadInstantValue) instantValue.oldSupported++;
                break;
            case MirlibClient::TRANSITION_GENERATION:
                ping.transitionTotal++;
                getInfo.transitionTotal++;
                dateTime.transitionTotal++;
                readStatus.transitionTotal++;
                instantValue.transitionTotal++;
                if (device.supportsPing) ping.transitionSupported++;
                if (device.supportsGetInfo) getInfo.transitionSupported++;
                if (device.supportsReadDateTime) dateTime.transitionSupported++;
                if (device.supportsReadStatus) readStatus.transitionSupported++;
                if (device.supportsReadInstantValue) instantValue.transitionSupported++;
                break;
            case MirlibClient::NEW_GENERATION:
                ping.newTotal++;
                getInfo.newTotal++;
                dateTime.newTotal++;
                readStatus.newTotal++;
                instantValue.newTotal++;
                if (device.supportsPing) ping.newSupported++;
                if (device.supportsGetInfo) getInfo.newSupported++;
                if (device.supportsReadDateTime) dateTime.newSupported++;
                if (device.supportsReadStatus) readStatus.newSupported++;
                if (device.supportsReadInstantValue) instantValue.newSupported++;
                break;
        }
    }

    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    auto printCommandLine = [](const String &name, const CommandSupport &support) {
        String nameStr = name;
        while (nameStr.length() < 15) nameStr += " ";

        String oldStr = (support.oldTotal > 0) ? String(support.oldSupported) + "/" + String(support.oldTotal) : "N/A";
        while (oldStr.length() < 6) oldStr += " ";

        String transStr = (support.transitionTotal > 0)
                              ? String(support.transitionSupported) + "/" + String(support.transitionTotal)
                              : "N/A";
        while (transStr.length() < 10) transStr += " ";

        String newStr = (support.newTotal > 0) ? String(support.newSupported) + "/" + String(support.newTotal) : "N/A";
        while (newStr.length() < 5) newStr += " ";

        int totalDevices = support.oldTotal + support.transitionTotal + support.newTotal;
        int totalSupported = support.oldSupported + support.transitionSupported + support.newSupported;
        float percentage = (totalDevices > 0) ? (float) totalSupported / totalDevices * 100 : 0;

        String compatStr = String(totalSupported) + "/" + String(totalDevices) + " (" + String(percentage, 1) + "%)";

        Serial.println(nameStr + " | " + oldStr + " | " + transStr + " | " + newStr + " | " + compatStr);
    };

    printCommandLine("Ping", ping);
    printCommandLine("GetInfo", getInfo);
    printCommandLine("ReadDateTime", dateTime);
    printCommandLine("ReadStatus", readStatus);
    printCommandLine("ReadInstantValue", instantValue);

    Serial.println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
    Serial.println("   ‚Ä¢ Ping, GetInfo, ReadDateTime - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã");
    Serial.println("   ‚Ä¢ ReadStatus - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è");
    Serial.println("   ‚Ä¢ ReadInstantValue - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π");
    Serial.println("   ‚Ä¢ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥");
}

void handleSerialCommands() {
    if (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        command.trim();
        command.toLowerCase();

        if (command == "scan" || command == "s") {
            Serial.println("üîç –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...");
            discoveredDevices.clear();
            scanDevices();
            analyzeDevices();
        } else if (command == "analyze" || command == "a") {
            analyzeDevices();
        } else if (command == "test" || command == "t") {
            testCommandCompatibility();
        } else if (command == "list" || command == "l") {
            if (discoveredDevices.empty()) {
                Serial.println("üì≠ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            } else {
                Serial.println("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:");
                for (size_t i = 0; i < discoveredDevices.size(); i++) {
                    const auto &device = discoveredDevices[i];
                    Serial.println("   " + String(i + 1) + ". 0x" + String(device.address, HEX) +
                                   " - " + device.generationName + " –ø–æ–∫–æ–ª–µ–Ω–∏–µ");
                }
            }
        } else if (command.startsWith("detail ")) {
            int deviceNum = command.substring(7).toInt();
            if (deviceNum >= 1 && deviceNum <= (int) discoveredDevices.size()) {
                printDeviceDetails(discoveredDevices[deviceNum - 1]);
            } else {
                Serial.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
            }
        } else if (command == "help" || command == "h") {
            Serial.println("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
            Serial.println("   scan (s)      - –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
            Serial.println("   analyze (a)   - –∞–Ω–∞–ª–∏–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
            Serial.println("   test (t)      - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥");
            Serial.println("   list (l)      - —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
            Serial.println("   detail N      - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ N");
            Serial.println("   help (h)      - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");
        } else if (command.length() > 0) {
            Serial.println("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏");
        }
    }
}

void printDeviceDetails(const DeviceInfo &device) {
    Serial.println("\nüì± –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–°–¢–†–û–ô–°–¢–í–ï");
    Serial.println("======================================");
    Serial.println("–ê–¥—Ä–µ—Å: 0x" + String(device.address, HEX));
    Serial.println("–°—Ç–∞—Ç—É—Å: " + String(device.isOnline ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"));
    Serial.println("ID –ø–ª–∞—Ç—ã: 0x" + String(device.boardId, HEX));
    Serial.println("–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏: 0x" + String(device.firmwareVersion, HEX));
    Serial.println("–ü–æ–∫–æ–ª–µ–Ω–∏–µ: " + device.generationName);
    Serial.println("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 100–ê: " + String(device.supports100A ? "–î–∞" : "–ù–µ—Ç"));
    Serial.println("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º: " + String(device.hasStreetLighting ? "–î–∞" : "–ù–µ—Ç"));

    Serial.println("\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
    Serial.println("   Ping: " + String(device.supportsPing ? "‚úÖ" : "‚ùå"));
    Serial.println("   GetInfo: " + String(device.supportsGetInfo ? "‚úÖ" : "‚ùå"));
    Serial.println("   ReadDateTime: " + String(device.supportsReadDateTime ? "‚úÖ" : "‚ùå"));
    Serial.println("   ReadStatus: " + String(device.supportsReadStatus ? "‚úÖ" : "‚ùå"));
    Serial.println("   ReadInstantValue: " + String(device.supportsReadInstantValue ? "‚úÖ" : "‚ùå"));
}
