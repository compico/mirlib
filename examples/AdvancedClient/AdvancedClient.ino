/*
 * AdvancedClient.ino
 * 
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º
 * –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥
 * 
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CC1101:
 * VCC -> 3.3V
 * GND -> GND
 * MOSI -> GPIO 23 (ESP32) / D7 (ESP8266)
 * MISO -> GPIO 19 (ESP32) / D6 (ESP8266)
 * SCK -> GPIO 18 (ESP32) / D5 (ESP8266)
 * CS -> GPIO 5 (ESP32/ESP8266)
 * GDO0 -> GPIO 2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * GDO2 -> GPIO 4 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */

#include <MirlibClient.h>

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const int CS_PIN = 5;
const int GDO0_PIN = 2;
const int GDO2_PIN = 4;

// –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞
struct MeterInfo {
    uint16_t address;
    String name;
    uint32_t password;
    MirlibClient::Generation generation;
    bool isOnline;
    unsigned long lastSuccessfulPoll;
    uint32_t pollCount;
    uint32_t errorCount;
};

MeterInfo meters[] = {
    {0x1234, "–°—á–µ—Ç—á–∏–∫ –∫—É—Ö–Ω–∏", 0x12345678, Mirlib::UNKNOWN, false, 0, 0, 0},
    {0x5678, "–°—á–µ—Ç—á–∏–∫ –∑–∞–ª–∞", 0x87654321, Mirlib::UNKNOWN, false, 0, 0, 0},
    {0x9ABC, "–°—á–µ—Ç—á–∏–∫ —Å–ø–∞–ª—å–Ω–∏", 0x11111111, Mirlib::UNKNOWN, false, 0, 0, 0},
    {0xDEF0, "–°—á–µ—Ç—á–∏–∫ –≥–∞—Ä–∞–∂–∞", 0x22222222, Mirlib::UNKNOWN, false, 0, 0, 0}
};

const int METER_COUNT = sizeof(meters) / sizeof(meters[0]);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
MirlibClient protocol(0xFFFF);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞
const unsigned long POLL_INTERVAL = 30000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –æ–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)
const unsigned long METER_TIMEOUT = 3000; // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ (3 —Å–µ–∫)
const unsigned long OFFLINE_THRESHOLD = 300000; // –°—á–µ—Ç—á–∏–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è offline –ø–æ—Å–ª–µ 5 –º–∏–Ω

unsigned long lastPollCycle = 0;
int currentMeterIndex = 0;
bool discoveryMode = true;

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("=== Mirlib AdvancedClient Example ===");
    Serial.println("üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∏–µ–Ω—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–ø—Ä–æ—Å–æ–º");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CC1101
    if (!protocol.begin(CS_PIN, GDO0_PIN, GDO2_PIN)) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CC1101!");
        while (1) {
            delay(1000);
        }
    }

    Serial.println("‚úÖ CC1101 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    protocol.setTimeout(METER_TIMEOUT);

    Serial.println("üìã –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞:");
    for (int i = 0; i < METER_COUNT; i++) {
        Serial.println("   " + String(i + 1) + ". " + meters[i].name +
                       " (0x" + String(meters[i].address, HEX) + ")");
    }
    Serial.println();

    // –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    Serial.println("üîç –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤...");
    performDiscovery();

    Serial.println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –æ–ø—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤");
    Serial.println("======================================");
}

void loop() {
    unsigned long currentTime = millis();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞
    if (currentTime - lastPollCycle >= POLL_INTERVAL) {
        startPollCycle();
        lastPollCycle = currentTime;
        currentMeterIndex = 0;
    }

    // –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—á–µ—Ç—á–∏–∫ –≤ —Å–ø–∏—Å–∫–µ
    if (currentMeterIndex < METER_COUNT) {
        pollMeter(currentMeterIndex);
        currentMeterIndex++;
        delay(1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ Serial
    handleSerialCommands();

    delay(100);
}

void performDiscovery() {
    Serial.println("üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤...");

    for (int i = 0; i < METER_COUNT; i++) {
        Serial.print("   –ü—Ä–æ–≤–µ—Ä–∫–∞ " + meters[i].name + " (0x" + String(meters[i].address, HEX) + ")... ");

        // –ü–æ–ø—ã—Ç–∫–∞ Ping
        PingCommand pingCmd;
        if (protocol.sendCommand(&pingCmd, meters[i].address)) {
            Serial.print("‚úÖ –û–Ω–ª–∞–π–Ω ");
            meters[i].isOnline = true;
            meters[i].lastSuccessfulPoll = millis();

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GetInfo
            if (determineGeneration(i)) {
                Serial.println("(" + getGenerationName(meters[i].generation) + ")");
            } else {
                Serial.println("(–ø–æ–∫–æ–ª–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)");
            }
        } else {
            Serial.println("‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            meters[i].isOnline = false;
        }

        delay(500); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    }

    Serial.println("üèÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n");
}

bool determineGeneration(int meterIndex) {
    GetInfoCommand infoCmd;

    if (protocol.sendCommand(&infoCmd, meters[meterIndex].address)) {
        GenerationInfo genInfo = infoCmd.getGenerationInfo();

        if (genInfo.isOldGeneration) {
            meters[meterIndex].generation = MirlibClient::OLD_GENERATION;
        } else if (genInfo.isTransitionGeneration) {
            meters[meterIndex].generation = MirlibClient::TRANSITION_GENERATION;
        } else if (genInfo.isNewGeneration) {
            meters[meterIndex].generation = MirlibClient::NEW_GENERATION;
        } else {
            meters[meterIndex].generation = MirlibClient::UNKNOWN;
            return false;
        }

        return true;
    }

    return false;
}

void startPollCycle() {
    Serial.println("\nüîÑ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ä–æ—Å–∞");
    Serial.println("–í—Ä–µ–º—è: " + String(millis() / 1000) + " —Å–µ–∫");
    printMeterStatistics();
}

void pollMeter(int index) {
    MeterInfo &meter = meters[index];

    Serial.println("\nüìä –û–ø—Ä–æ—Å: " + meter.name + " (0x" + String(meter.address, HEX) + ")");

    meter.pollCount++;
    bool success = false;

    // 1. Ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
    PingCommand pingCmd;
    if (protocol.sendCommand(&pingCmd, meter.address)) {
        Serial.println("   ‚úÖ Ping OK");
        success = true;

        // 2. –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏)
        readDateTime(index);

        // 3. –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è
        readStatus(index);

        // 4. –ß—Ç–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (meter.generation != MirlibClient::OLD_GENERATION) {
            readInstantValues(index);
        }

        meter.isOnline = true;
        meter.lastSuccessfulPoll = millis();
    } else {
        Serial.println("   ‚ùå –ù–µ—Ç —Å–≤—è–∑–∏: " + String(protocol.getLastError()));
        meter.errorCount++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—à–µ–ª –ª–∏ —Å—á–µ—Ç—á–∏–∫ –≤ offline
        if (millis() - meter.lastSuccessfulPoll > OFFLINE_THRESHOLD) {
            if (meter.isOnline) {
                Serial.println("   ‚ö†Ô∏è –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ—à–µ–ª –≤ offline");
                meter.isOnline = false;
            }
        }
    }

    Serial.println("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: " + String(meter.pollCount) + " –æ–ø—Ä–æ—Å–æ–≤, " +
                   String(meter.errorCount) + " –æ—à–∏–±–æ–∫, –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: " +
                   String((millis() - meter.lastSuccessfulPoll) / 1000) + " —Å–µ–∫ –Ω–∞–∑–∞–¥");
}

void readDateTime(int index) {
    ReadDateTimeCommand cmd;

    if (protocol.sendCommand(&cmd, meters[index].address)) {
        char timeStr[20];
        cmd.formatDateTime(timeStr);
        Serial.println("   üïê –í—Ä–µ–º—è: " + String(timeStr));
    } else {
        Serial.println("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏");
    }
}

void readStatus(int index) {
    MeterInfo &meter = meters[index];

    ReadStatusCommand cmd;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è
    if (meter.generation == MirlibClient::OLD_GENERATION) {
        cmd.setGeneration(0x01, 0x30); // –ü—Ä–∏–º–µ—Ä ID –∏ —Ä–æ–ª–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
    } else {
        cmd.setGeneration(0x09, 0x32); // –ü—Ä–∏–º–µ—Ä ID –∏ —Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        cmd.setRequest(ACTIVE_FORWARD);
    }

    if (protocol.sendCommand(&cmd, meter.address)) {
        if (cmd.isOldGeneration()) {
            auto response = cmd.getOldResponse();
            Serial.println("   ‚ö° –≠–Ω–µ—Ä–≥–∏—è: " + String(response.totalEnergy) +
                           " (—Ç–∞—Ä–∏—Ñ " + String(response.configByte.activeTariff + 1) + ")");
        } else {
            auto response = cmd.getNewResponse();
            Serial.println("   ‚ö° –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞—è: " + String(response.totalActive));
            Serial.println("   ‚ö° –≠–Ω–µ—Ä–≥–∏—è –ø–æ–ª–Ω–∞—è: " + String(response.totalFull));
        }
    } else {
        Serial.println("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞");
    }
}

void readInstantValues(int index) {
    MeterInfo &meter = meters[index];

    ReadInstantValueCommand cmd;
    cmd.setGeneration(0x09, 0x32); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
    cmd.setRequest(GROUP_BASIC);

    if (protocol.sendCommand(&cmd, meter.address)) {
        if (cmd.isTransitionGeneration()) {
            auto response = cmd.getTransitionResponse();
            Serial.println("   üîå U: A=" + String(response.getVoltageA(), 1) + "–í, B=" +
                           String(response.getVoltageB(), 1) + "–í, C=" + String(response.getVoltageC(), 1) + "–í");
            Serial.println("   ‚ö° I: A=" + String(response.getCurrentA(), 2) + "–ê, B=" +
                           String(response.getCurrentB(), 2) + "–ê, C=" + String(response.getCurrentC(), 2) + "–ê");
            Serial.println(
                "   üìà f=" + String(response.getFrequencyHz(), 2) + "–ì—Ü, cos œÜ=" + String(
                    response.getCosPhiValue(), 3));
        } else if (cmd.isNewGeneration()) {
            auto response = cmd.getNewBasicResponse();
            Serial.println("   üîå U: A=" + String(response.getVoltageA(), 1) + "–í, B=" +
                           String(response.getVoltageB(), 1) + "–í, C=" + String(response.getVoltageC(), 1) + "–í");
            Serial.println("   ‚ö° I: A=" + String(response.getCurrentA(), 2) + "–ê, B=" +
                           String(response.getCurrentB(), 2) + "–ê, C=" + String(response.getCurrentC(), 2) + "–ê");
            Serial.println("   üîã P=" + String(response.getActivePowerKW(), 3) + "–∫–í—Ç, Q=" +
                           String(response.getReactivePowerKvar(), 3) + "–∫–≤–∞—Ä");
        }
    } else {
        Serial.println("   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π");
    }
}

void printMeterStatistics() {
    Serial.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤:");

    int onlineCount = 0;
    for (int i = 0; i < METER_COUNT; i++) {
        if (meters[i].isOnline) onlineCount++;

        String status = meters[i].isOnline ? "üü¢ Online" : "üî¥ Offline";
        String generation = getGenerationName(meters[i].generation);
        float successRate = (meters[i].pollCount > 0)
                                ? (float) (meters[i].pollCount - meters[i].errorCount) / meters[i].pollCount * 100
                                : 0;

        Serial.println("   " + meters[i].name + ": " + status + " | " + generation +
                       " | –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " + String(successRate, 1) + "%");
    }

    Serial.println("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: " + String(onlineCount) + "/" + String(METER_COUNT) + " –æ–Ω–ª–∞–π–Ω");
}

String getGenerationName(Mirlib::Generation gen) {
    switch (gen) {
        case MirlibClient::OLD_GENERATION: return "–°—Ç–∞—Ä–æ–µ";
        case MirlibClient::TRANSITION_GENERATION: return "–ü–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ";
        case MirlibClient::NEW_GENERATION: return "–ù–æ–≤–æ–µ";
        default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
}

void handleSerialCommands() {
    if (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        command.trim();
        command.toLowerCase();

        if (command == "status" || command == "s") {
            printMeterStatistics();
        } else if (command == "discovery" || command == "d") {
            Serial.println("üîç –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ...");
            performDiscovery();
        } else if (command == "reset" || command == "r") {
            Serial.println("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");
            for (int i = 0; i < METER_COUNT; i++) {
                meters[i].pollCount = 0;
                meters[i].errorCount = 0;
            }
        } else if (command == "poll" || command == "p") {
            Serial.println("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤...");
            for (int i = 0; i < METER_COUNT; i++) {
                pollMeter(i);
                delay(1000);
            }
        } else if (command.startsWith("poll ")) {
            int meterNum = command.substring(5).toInt();
            if (meterNum >= 1 && meterNum <= METER_COUNT) {
                Serial.println("üéØ –û–ø—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ " + String(meterNum) + "...");
                pollMeter(meterNum - 1);
            } else {
                Serial.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞ (1-" + String(METER_COUNT) + ")");
            }
        } else if (command == "help" || command == "h") {
            Serial.println("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
            Serial.println("   status (s)    - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            Serial.println("   discovery (d) - –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ");
            Serial.println("   reset (r)     - —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
            Serial.println("   poll (p)      - –æ–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏");
            Serial.println("   poll N        - –æ–ø—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ N");
            Serial.println("   help (h)      - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");
        } else if (command.length() > 0) {
            Serial.println("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏");
        }
    }
}
